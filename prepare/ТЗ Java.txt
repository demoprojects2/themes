"На Дерибасовской хорошая погода, а на Брайтон Бич опять идут дожди!"


--- СМЫСЛ ПРИЛОЖЕНИЯ ---
Система мониторинга погодных условий.

--- ПРИНЦИПЫ ---
Принцип творчества: допускается отходить от плана и воплощать свои идеи, смысл должен сохраняться.
Принцип минимальной реализации: не обязательно реализовать все требования (это крайне сложно!), важна скорее суть. То, что реализовано, должно работать. 
Принцип альтернативного подход: по ходу описания могут встречаться названия рекомендуемых технологий, но пользоваться аналогами и альтернативами допускается (обоснования приветствуются).
Принцип следования подходам: большое внимание при проверке будет уделено рассмотрению системы с точки зрения принципов ООП, SOLID, DRY, GRASP.
Принцип важности предыдущего принципа: следуйте принципам ООП, SOLID, DRY, GRASP, используйте паттерны!
Принцип свободного подхода: если какая-либо часть требования не ясна или описана слишком абстрактно, реализуйте так, как вам заблагорассудиться! Используйте те подходы, которые считаете лучшими.
Принцип написания документации: чтобы не тратить много времени на анализ логики и сущностей, позаботьтесь о добавление комментарием и доков. Избыточные комментарии не будут проблемой.
Принцип реальзиции времени: если вы справились быстрее указанного срока, не торопитесь и подумайте, что вы можете сделать лучше. 
Принцип тестирования: пишите unit-тесты.
Принцип использования логгеров: настройте и используйте логгер.*

--- ОПИСАНИЕ СИСТЕМЫ ---
Представляет собой пример микросервисной архитектуры. 
1. Каждый сервис должен уметь работать автономно и сохранять часть функционала (даже если остальные сирвисы выключены).
2. Мы должны иметь набор предпосылок для масштабированию системы (+ должны уметь распределять нагрузку).*
3. Должен быть реализован цикл непрерывной интеграции.*
4. В качестве сборщика должен быть использован Maven.
5. Для одного из микросервисов использовать в качестве сборщика Gradle.*
6. Система контроля версий - git.
7. Java 8.
8. Взаимодействия между микросервисами должные осуществляться по средствам посылки сообщений (json) друг другу (например можно использовать RabbitMQ).
9. Основной инструмент для реализации и конфигурации сервисов - Spring (Использование Spring Boot допускается не более чем на одном виде микросервисов).

--- ОПИСАНИЕ МИКРОСЕРВИСОВ ---
1. Симулятор погодных условий - ДАТЧИК.
В связи с тем, что мы не имеем возможность работать с настоящим датчиком, датчик будет симулировать свою работу. По сути, он должен генерировать большое количество различных параметров описывающих погодные условия (температуру, влажность, давление, направление и сила ветра и т.п.). 
Сгенерированные данные должны агрегироваться (необходимо рассмотреть возможность использования механизма кэширования*) и передаваться ОБРАБОТЧИКАМ.
Мы должны иметь возможность запускать несколько инстансов датчиков.*
Набор данных зависимости от геолокации и времени года.*
public class Weather {

}

2. ОБРАБОТЧИКИ
Обработчики систематизирую и упорядочивают информацию поступающую от ДАТЧИКОВ (систематизация может иметь любой характер, - по геолокациям, по смыслу (Холодно и дождливо, - прим.)). 
Один обработчик может получать информацию от нескольких датчиков.*
Обработчик должен иметь локальный и надежный кэшь (при отказе обработчика данные не должны быть утеряны).
Упорядоченная информация должна записываться в базе данных. Для этого она агрегируется и отправляется СИСТЕМЕ ДЛЯ РАБОТЫ С БД.

3. СИСТЕМА ДЛЯ РАБОТЫ С БД.
Принимает данные от ОБРАБОТЧИКОВ и сохраняет их в БД.
Предоставляет данные из БД по требованию.
Может работать с несколькими обработчиками.*
Необходимо иметь две альтернативных системы для работы с БД: одну на реализованную на Hibernate, одну на Spring Data. Эти две системы должны быть взаимозаменяемыми.
Для работы с кастомными запосами пользоватлей должна иметь модуль работающий на JDBC.

4. СИСТЕМА ПО АДМИНИСТРИРОВАНИЯ И МОНИТОРИНГА СИСТЕМЫ.
Каждый микросервис должнен иметь модуль для связи с этой системой (REST).
Мы должны иметь возможность отправлять рестовые запросы во все другие микросервисы для их настройки (пример: ДАТЧИКИ - возможность увеличивать кол-во генерируемых данных, СИСТЕМА ПО АНАЛИЗУ ДАННЫХ ДЛЯ ПОЛЬЗОВАТЕЛЕЙ, - удалять пользователей).
Создать веб-интерфейс.*

5. СИСТЕМА ПО АНАЛИЗУ ДАННЫХ ДЛЯ ПОЗОВАТЕЛЯ.
Система которая по требованию пользователя может вернуть ему ответ о том, как нужно одеться в конкретной геолокации (должна опираться на данные из БД).
Создать простой веб-интерфейса.
Использовать Spring MVC.*
Для аутентификации и авторизации использовать Spring Security.*

6. СИСТЕМА ДЛЯ ОРКЕСТРИРОВАНИЯ И РАСПРЕДЕЛЕНИЯ НАГРУЗКИ.*
Использовать существующию или реализуйте свою.

--- БАЗА ДАННЫХ ---
Использовать можно любую удобную для выс СУБД.
Необходимо обеспечить консистентность данных.
Найдете где уместно использовать Хранимыи процедуры и тригеры.*


* требования отмеченные звездочкой опциональны

