Bootstrap Class Loader – It loads JDK internal classes, typically loads rt.jar and other core classes for example java.lang.* package classes
Extensions Class Loader – It loads classes from the JDK extensions directory, usually $JAVA_HOME/lib/ext directory.
System Class Loader – It loads classes from the current classpath that can be set while invoking a program using -cp or -classpath command line options.

A bootstrap or primordial class loader is the parent of all the others. 
	The bootstrap class loader is written in native code, not Java – so it doesn’t show up as a Java class. 
	Due to this reason, the behavior of the bootstrap class loader will differ across JVMs.
	It’s mainly responsible for loading JDK internal classes, typically rt.jar and other core libraries located in $JAVA_HOME/jre/lib directory.
	It is part of the core JVM and is written in native code as pointed out in the above example. 
	Different platforms might have different implementations of this particular class loader.
Extension class loaders load classes that are an extension of the standard core Java classes.
	The extension class loader is a child of the bootstrap class loader and takes care of loading the extensions of the standard core Java classes 
	so that it’s available to all applications running on the platform.
	Extension class loader loads from the JDK extensions directory, usually $JAVA_HOME/lib/ext directory or any other directory mentioned in the java.ext.dirs system property.
System class loader load classes (.class files) from classpath (target/classes/)
	The system or application class loader, on the other hand, takes care of loading all the application level classes into the JVM. It loads files found 
	in the classpath environment variable, -classpath or -cp command line option. Also, it’s a child of Extensions classloader.
	
Class loaders are part of the Java Runtime Environment. When the JVM requests a class, the class loader tries to locate the class and load the class definition into the runtime using the fully qualified class name.
The java.lang.ClassLoader.loadClass() method is responsible for loading the class definition into runtime. It tries to load the class based on a fully qualified name.
If the class isn’t already loaded, it delegates the request to the parent class loader. This process happens recursively.
Eventually, if the parent class loader doesn’t find the class, then the child class will call java.net.URLClassLoader.findClass() method to look for classes in the file system itself.
If the last child class loader isn’t able to load the class either, it throws java.lang.NoClassDefFoundError or java.lang.ClassNotFoundException.

UNIQUE CLASSES
As a consequence of the delegation model, it’s easy to ensure unique classes as we always try to delegate upwards.
If the parent class loader isn’t able to find the class, only then the current instance would attempt to do so itself.

VISIBILITY
In addition, children class loaders are visible to classes loaded by its parent class loaders.
For instance, classes loaded by the system class loader have visibility into classes loaded by the extension and Bootstrap class loaders but not vice-versa.
To illustrate this, if Class A is loaded by an application class loader and class B is loaded by the extensions class loader, then both A and B classes are visible as far as other classes loaded by Application class loader are concerned.
Class B, nonetheless, is the only class visible as far as other classes loaded by the extension class loader are concerned.

loadClass() -> loadClass() -> loadClass(), findClass() -> findClass() -> findClass() -> ClassNotFoundException

WHY
Helping in modifying the existing bytecode, e.g. weaving agents
Creating classes dynamically suited to the user’s needs. e.g in JDBC, switching between different driver implementations is done through dynamic class loading.
Implementing a class versioning mechanism while loading different bytecodes for classes with same names and packages. This can be done either through URL class loader (load jars via URLs) or custom class loaders.