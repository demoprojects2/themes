В императивном программирование имеешь дело с состоянием объекта, а в функциональном нет такого понятия, и всё идёт в один поток.
Если кратко: императивная — манипулирование состоянием; декларативная парадигма — отсутствие состояния.

Императивный стиль - это такой стиль программирования, при котором вы описываете, как добиться желаемого результата.
Императивное программирование (от англ. imperative — приказ) — это парадигма программирования, которая описывает процесс вычисления в виде инструкций, изменяющих состояние данных.
	

Декларативный стиль - такой стиль, в котором вы описываете, какой именно результат вам нужен. К декларативному стилю относятся функциональное и логическое программирование.
	Функциональное программирование — программирование значениями (не используются присваивания). Предполагает обходиться вычислением результатов функций от исходных данных и 
	результатов других функций, и не предполагает явного хранения состояния.
	Для этой парадигмы характерно:
		функции первого класса (можно передавать как аргументы и возвращать из других функций);
		функции высшего порядка (принимают на вход другие функции);
		рекурсии;
		состояние никогда не меняется;
		не используется присваивание.
	Основой для функционального программирования являются Лямбда-исчисления.

============================================================
Императивное программирование (от англ. imperative — приказ) — это парадигма программирования, которая описывает процесс вычисления в виде инструкций, изменяющих состояние данных.

Программа — набор инструкций изменяющих состояние (данные). Мы говорим КАК выполнить задачу, описывает алгоритм, даем набор последовательных инструкций.


Для этой парадигмы характерно использование:

именованных переменных;
оператора присваивания;
составных выражений;
подпрограмм;
циклов.
К подвидам императивного программирования относят Процедурное и Объектно-ориентированное программирование (ООП).




Декларативное программирование — это парадигма программирования, в которой задается спецификация решения задачи, то есть описывается, ЧТО представляет собой проблема и ожидаемый результат. Декларативные программы не используют состояния, то есть не содержат переменных и операторов присваивания. Программа — спецификация описывающая решение задачи.

К подвидам декларативного программирования относят Функциональное и Логическое программирование.

Функциональное программирование — программирование значениями (не используются присваивания). Предполагает обходиться вычислением результатов функций от исходных данных и результатов других функций, и не предполагает явного хранения состояния.

Для этой парадигмы характерно:

функции первого класса (можно передавать как аргументы и возвращать из других функций);
функции высшего порядка (принимают на вход другие функции);
рекурсии;
состояние никогда не меняется;
не используется присваивание.
Функциональное программирование — это программирование значениями. Функциональный подход к программированию отличается от императивного отсутствием внутренних состояний. В функциональном программировании отсутствует присваивание как способ изменения значения.

Вы можете видеть в функциональных языках использование знака =, но в функциональных языках он оно называется “связывание“. Мы не изменяем никаких переменных, мы просто даем имя (алиас) какому-то выражению и потом обращаемся к этому выражению через это имя.

Основой для функционального программирования являются Лямбда-исчисления, многие функциональные языки можно рассматривать как «надстройку» над ними.

Лямбда-функции — это функции, у которой фактически нет имени. Лямда-выражения — анонимные функции. Понятие пришло из математики, где использовалась специальная форма записи функций, ликвидирующая неоднозначности функция/значение функции и пр.

Выводы:
Еесли кратко: императивная — манипулирование состоянием, describe how to execute tasks; декларативная парадигма — отсутствие состояния. You only give a task and say what result you are expecting
В общем и целом, декларативное программирование идет от человека к машине, тогда как императивное — от машины к человеку.
=============================================================================

Что быстрее, что больше жрёт ресурсов. В чём отличии for обычного от for в stream API

In Java8 Streams, performance is achieved by parallelism, laziness, and using short-circuit operations, but there is a downside as well, and we need to be very cautious while choosing Streams, as it may degrade the performance of your application.

Laziness - intermediate operations will not executed until a terminal operation is called.

Short-Circuit Behavior - Short-circuiting will terminate the processing once condition met. There are a number of short-circuiting operations available. For e.g. anyMatch, allMatch, findFirst, findAny, limit, etc.
Stateful Intermediate Operations: distinct(), sort(), limit(), etc. Могут замедлять производительность приложения.
Stateless Intermediate Operations: filter(), map(), etc.

Streams созданы для улучшения производительности, но не всегда эффективны, поэтому стримами нужно пользоваться мудро.