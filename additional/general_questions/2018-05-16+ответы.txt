
 Общие вопросы ( + вопросы к кторым нужно быть готовым при прохождении собеседования с заказчиком):

0. Расскажи о себе и своём опыте
	Ответ: где учился, где работал, какие проекты/проблемы запомнились
1. С какими методологиями разработки знаком?
	Ответ:https://habr.com/company/edison/blog/269789/ + KANBAN + SCRUM
2. Как проводился код-ревью (о каком-то отдельном проекте)
	Ответ: рассказать о работе над конкретным проектом?
3. Опыт оценки задач (jira)
	Ответ: рассказать о навыке оценки временных затрат на задачу (личный опыт)
4. CI/CD (о непрерывной интеграции)
	Ответ:концепция, которая реализуется как конвейер, облегчая слияние только что закомиченного кода в основную кодовую базу. Концепция позволяет запускать различные типы тестов на каждом этапе (выполнение интеграционного аспекта) и завершать его запуском с развертыванием закомиченного кода в фактический продукт, который видят конечные пользователи (выполнение доставки).
5. Принципы SOLID?
	Ответ: 
		S - Single resposibility,  для изменения класса может быть всего 1 причина
		O - open-closed  - класс можно расширить по функциональности, но изменений в уже существующие методы/поля вносить нельзя
		L - что-то про некую мисс Лисков - если" B" потомок "A", то "B" должен в любом случае мочь "А" подменить (по сути принцип полиморфизма)
		I - много интерфейсов - это хорошо :-)
		D - инверсия зависимости, абстракции во все поля
6. Принципы ООП?
	Ответ: абстракция, инкапсуляция, наследование, полиморфизм
7. Какие паттерны(шаблоны) проектирования ты знаешь?
	Ответ: Порождающие (Builder, Factory method, Abstract Factory), Структурные (Decorator, Facade) , Поведенческие (Strategy, Observer, Command)
8. Какие парадигмы программирования ты знаешь?
	Ответ: процедурная , ООП, функциональная, аспектная
	
 Тестирование:

0. Что такое mock?
	Ответ: Объект Mock используется для модульного тестирования. Если у вас есть объект, методы которого вы хотите протестировать, и эти методы зависят от какого-либо другого объекта, вы создаете макет зависимости, а не фактический экземпляр этой зависимости. Это позволяет вам изолировать свой объект.
1. Что такое unit тестирование?
	Ответ: Модульное тестирование, или юнит-тестирование (англ. unit testing) — процесс в программировании, позволяющий проверить на корректность отдельные модули исходного кода программы.Идея состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно быстро проверить, не привело ли очередное изменение кода к регрессии, то есть к появлению ошибок в уже оттестированных местах программы, а также облегчает обнаружение и устранение таких ошибок.
2. Что такое TDD?
	Ответ: TDD, test-driven development или раз­ра­ботка через тести­ро­ва­ние — это мето­до­ло­гия раз­ра­ботки ПО, кото­рая осно­вы­ва­ется на повто­ре­нии корот­ких цик­лов раз­ра­ботки: изна­чально пишется тест, покры­ва­ю­щий жела­е­мое изме­не­ние, затем пишется про­грамм­ный код, кото­рый реа­ли­зует жела­е­мое пове­де­ние системы и поз­во­лит пройти напи­сан­ный тест, а затем про­во­дится рефак­то­ринг напи­сан­ного кода с посто­ян­ной про­вер­кой про­хож­де­ния тестов. https://web-creator.ru/articles/about_tdd

 Java:

0. Тип byte - сколько байт занимает, диапазон значений.
	Ответ: 8 бит(1 байт),  диапазон от -128 до 127
1. Тип int - сколько байт занимает, диапазон значений.
	Ответ: 32 бит (8 байт) ,  диапазон от -2147483648 до 2147483647 (прибл. по 2 млрд значений в обе стороны или 2^32)
2. О типе int - а если у нас 128 разрарядная система, сколько байт будет весить int? (есть ли зависимость от разрядности ОС?)
	Ответ: Зависимость от разрядности системы есть у ссылок (так 64*битные системы подразумевают размер указателя в 64 бита, хотя в целях экономии места,по умолчанию они огранчиены 32 битами (опция  -XX:+UseCompressedOops )). Для типа boolean размер зависит от конкретной реализации JVM (обычно 4 байта).
	А вот остальные примитивы не зависят от разрядности системы и всегда занимают фиксированное место (32 байта для int).

3. Вопрос пулах интеджеров:

	Integer a = 120;
	Integer b = 120;
	Integer c = 130;
	Integer d = 130;
	System.out.println(a==b);
	System.out.println(c==d);

	В результате выполнения данного кода будет выведено:
	 true true
	 false false
	 false true
	 true false
	 произойдет ошибка времени выполнения
		Ответ: true false, в первом случае значения берутся из пула (диапазон как у байта  от -128 до 127), во втором - создаются новые объекты.
4. Что такое раннее и позднее связывание?
	Ответ: Существует два типа связывания методов в языке Java: ранее связывание (его ещё называют статическим) и позднее (соответственно, динамическое) связывание. Вызов метода в Java означает, что этот метод привязывается к конкретному коду или в момент компиляции, или во время выполнения, при запуске программы и создании объектов.  https://javarush.ru/groups/posts/439-razlichija-mezhdu-rannim-i-pozdnim-svjazihvaniem-v-java
5. Что произойдет в результате выполнениея кода (о перегрузке):

	public class Overload{

	  public void method(Object o) {
	    System.out.println("Object");
	  }

	  public void method(java.io.FileNotFoundException f) {
	    System.out.println("FileNotFoundException");
	  }

	  public void method(java.io.IOException i) {
	    System.out.println("IOException");
	  }

	  public static void main(String args[]) {
	    Overload test = new Overload();
	    test.method(null);
	  }

	}
	Ответ:  Большинство людей угадывает ответ с 5-го раза. FileNotFoundException — последнее, о чем думаешь глядя на этот код. Но на самом деле всё просто. Начнем с того, что в любой метод можно передать null. А дальше компилятор выбирает наиболее узкую версию метода из возможных. В данном случае FileNotFoundException это подкласс IOException, который, в свою очередь, подкласс Object. Поэтому компилятор выбирает именно данный метод. 
	https://habr.com/post/111189/
6. Что такое wildcard (Collection <?>) ?
	Ответ: Подстановочный тип списка Collection<?> отличается как от простого типа Collection, так и от конкретного типа Collection<Object>. Когда говорят, что переменная x имеет тип Collection<?>, это значит, что существует некоторый тип T, для которого x имеет тип Collection<T>, что x является гомогенной последовательностью, хотя и неизвестно, элементы какого именно типа она содержит. Это не значит, что содержимым может быть все что угодно, это значит, что мы не знаем, какие именно ограничения типа имеются у содержимого, — но мы знаем, что ограничения присутствуют. С другой стороны, простой тип Collection является гетерогенным; мы не можем накладывать никаких ограничений на тип его содержимого, а конкретный тип Collection<Object> значит, что мы точно знаем, что он может содержать любой объект. https://www.ibm.com/developerworks/ru/library/j-jtp04298/index.html
7. В чем различие между <? super Type> и <? extends Type> ?

	public void method(List<? super Integer> list) {
		... что тут можно извлечь из этой коллекции, что туда можно добавить?	
	}
	Ответ: Можно положить Integer или предков Integer (вплоть до Object).
	public void method(List<? extends Integer> list) {
		... что тут можно извлечь из этой коллекции, что туда можно добавить?	
	}
	Ответ: Можно положить Integer или потомков Integer (если кто-то кога-нибудь сможет расширить final класс :-) ) .
	https://habr.com/post/207360/#pecs
8. В сигнатуре метода есть пробрасывание исключений, что можно сделать при переопределении (сузить пробрасываемое исключение, расширить, ничего нельзя)?
	Ответ: нельзя расширять исключение ( бросать Exception вместо FileNotFoundException), нельзя бросать исключение если родительский метод его не выбрасывает.
9. Можно ли пробрасывать исключения в конструкторе?
	Ответ: Да, конструкторы могут генерировать исключения. Обычно это означает, что новый объект сразу же подходит для сборки GC.https://stackoverflow.com/questions/1371369/can-constructors-throw-exceptions-in-java/24071826
10. В сигнатуре конструктора есть пробрасывание исключений, что можно сделать при переопределении (сузить пробрасываемое исключение, расширить, ничего нельзя)?
	Ответ: нельзя расширять исключение ( бросать Exception вместо FileNotFoundException), нельзя бросать исключение если родительский метод его не выбрасывает.
11. Можно ли наследоваться от класса с приватным конструктором?
	Ответ: Если у класса приватный конструктор, то у потомка нет доступа к этому конструктору, соответственно и наследоваться нельзя.
12. чем отличается >> и >>> и что это вообще такое?
	 Ответ: Это побитовые операции , >>	 - побитовый сдвиг вправо , >>> - побитовый сдвиг вправо с заполнением нулями
13. Что ты знаешь про загрузчики классов?
	Ответ:  Все классы в Java загружаются с помощью загрузчиков классов.  Вначале работы программы создается 3 основных загрузчика классов:
				базовый загрузчик (bootstrap)
				загрузчик расширений (extention)
				системный загрузчик (system/application)
			Помимо основных загрузчиков классов, существует возможность создания пользовательских загрузчиков классов.
			http://www.quizful.net/post/Java

14. Что за ошибка ConcurrentModificationException и когда её можно получить?
	Ответ: Как известно, ConcurrentModificationException к многопоточности никакого отношения не имеет. Возникает эта гадость, когда мы пытаемся модифицировать коллекцию во время итерирования по ней.  https://habr.com/post/325426/
15. Расскажи иерархию коллекций.
	Ответ: https://habr.com/post/237043/
16. Разница между ArrayList и LinkedList?
	Ответ: https://proft.me/2014/10/29/raznica-mezhdu-arraylist-i-linkedlist/
17. Как устроен HashMap?
	Ответ: http://info.javarush.ru/translation/2013/10/22/%D0%9A%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-HashMap-%D0%B2-Java.html
18. Вспомни методы Object
	Ответ: http://developer.alexanderklimov.ru/android/java/object.php
19. метод Clone какой имеет модификатор доступа? А порассуждай почему.
	Ответ: protected, рассуждения по линку https://javatalks.ru/topics/50317 (рефлексирвоать на данную тему можно весьма продолжительное время)
20. Какие методы в Object имеют модификатор доступа protected?
  	Ответ: finalize() и clone()
21. Какие из методов Object имеют нативную реализацию? Что такое модификатор native? На каком ЯП реализованы эти методы?
	Ответ: hashCode(),clone(),notify(),notifyAll() wait(), native означает, что функционал метода написан НЕ на Java , в большенстве случаев это "C".
22. Что означает модификатор доступа volatile?
	Ответ: Модификатор volatile накладывает некоторые дополнительные условия на чтение/запись переменной. Важно понять две вещи о volatile переменных:
    Операции чтения/записи volatile переменной являются атомарными.Результат операции записи значения в volatile переменную одним потоком, становится виден всем другим потокам, которые используют эту переменную для чтения из нее значения.
23. Модель памяти в джава (в общих чертах)? 
	Ответ:http://www.javaspecialist.ru/2011/06/java-memory-model.html
24. Как работает GC (рассказать абстрактно)?
	Ответ: http://info.javarush.ru/translation/2014/08/12/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0-%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0.html
25. Еще про коллекции: какие интерфейсы имплементит LinkedList?
	Ответ:	Deque  и List
26. Что такое LIFO и FIFO ?
	Ответ: Last In First Out - это стэк, First In First out - это очередь
27. Расскажи про SOAP и REST веб сервисы?
	Ответ:SOAP сервисы обмениваются данными с помощью XML, поддерживают WS-Security и различные протоколы передачи данных, REST сервсиы могут передавать данные в различных форматах (XML,JSON и т.п.), но как протокол используют практически исключительно HTTP(S). SOAP работают с операциями, а REST - с ресурсами. Т.е. Rest больше про производительность и простоту, а SOAP про безопастность (т т.ч. из-за ACID).https://habr.com/post/131343/
28. Отличие REST и RESTfull (развести понятия).
	Ответ: REST - принципы проектирования веб-сервисов,  RESTfull сервисы построены по этим принципам

 Базы данных (jdbc, hib, sql)

0. чем отличается statment от preparedStatment (jdbc)?
	Ответ:
1. Состояния сущностей в hibernate?
	Ответ: transient (свеженьки инстанс), persisted (инстанс конкретной сессии), detached (инстанс после закрытия сессии)
2. Чем отличается JPA и hib.? как они взаимосоотносятся?
	Ответ: Hibernate - одна из самых популярных реализаций JPA https://habr.com/post/265061/
3. Сколько есть кешей в хибернейт
	Ответ: 3 уровня (1-й в пределах сессии, неоключаемый), 2-й в пределах session factory и 3-й querry cache
4. Типы запросов в hib.?
	Ответ: HQL , Criteria и Native SQL
5. Стратегии загрузки в hib.?
	Ответ: Существуют следующие типа fetch'a:
			1.Join fetching: hibernate получает ассоциированные объекты и коллекции одним SELECT используя OUTER JOIN
			2.Select fetching: использует уточняющий SELECT чтобы получить ассоциированные объекты и коллекции. Если вы не установите lazy fetching определив 	lazy="false", уточняющий SELECT будет выполнен только когда вы запрашиваете доступ к ассоциированным объектам
			3.Subselect fetching: поведение такое же, как у предыдущего типа, за тем исключением, что будут загружены ассоциации для все других коллекций, "родительским" для которых является сущность, которую вы загрузили первым SELECT&#8217;ом.
			4.Batch fetching: оптимизированная стратегия вида select fetching. Получает группу сущностей или коллекций в одном SELECT
6. Стратегии наследование в hib.?
	Ответ: https://habr.com/post/337488/
7. Типы join'ов?
	Ответ: INNER и OUTHER, последние делятся на LEFT и RIGHT также возможен FULL JOIN (не для всех БД!)
8. Что такое нормальные формы? Какие ты знаешь?
	Ответ: http://seroed.intfom.com/programirovanie/mysql/item/239-normalizatsiya-bd-mysql-normalnye-formy#.Wv1yP3--nIU
9. Что такое денормализация?
	Ответ: https://habr.com/post/64524/
10. Что такое ACID?
	Ответ: Принципы  для правильной транзакции : Атомарность, Консистентность, Изолированность, Устойчивость.
11. Что такое уровни изоляции транзакций?
	Ответ: 4 уровня изоляции Read Uncommited, Read Commited, Repeatable Read, Serializable, позволяющие решать фундаментальные проблемы транзакций
12. Какие проблемы решают уровни изоляции транзакций?
	Ответ: 4 основных проблемы: "Потерянное обновление", "Грязное чтение", "Неповторяющееся чтение", "Фантомное чтение"


 Весна:

0. Какие шаблоны Spring использует в своей работе?
Ответ: Просто The BEST  https://blog.eduonix.com/java-programming-2/learn-design-patterns-used-spring-framework/
1. Scope бинов?
	Ответ: http://proselyte.net/tutorials/spring-tutorial-full-version/introduction-into-beans/
2. Типы контекста?
	Ответ: https://habr.com/post/222579/
3. Что такое MVC? Расскажи, в общих чертах, как в Spring мы работаем с MVC (здесь кроме прочего нужно упомянуть DispatcherServlet/FrontController)?
	Ответ: https://habr.com/post/336816/
4. Как сприн работает с исключениями (на примере обработки исключений в Spring DATA _ jdbc)?
	Ответ: http://www.seostella.com/ru/article/2012/05/08/exceptionhandler-v-spring-i-obrabotka-oshibok.html


	Сборщики:
1. Какие обязательные теги есть в pom.xml (как по мне, спорный вопрос)?
	Ответ: http://www.apache-maven.ru/project-file.html
2. Чем отличаются фазы package и install?
	Ответ:  package - создание пакета,  install - установка пакета  в  локальный/удалённый репозиторий maven.
3. Рассказать о циклах (default, clear, site)
	Ответ: http://proselyte.net/tutorials/maven/build-life-cycle/

https://habr.com/post/337488/
https://netology.ru/blog/scrum-kanban
https://learngitbranching.js.org/
https://try.github.io/levels/1/challenges/1

























