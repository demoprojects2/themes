______________________________________
Общие вопросы:
1. Расскажи о своем опыте.
2. Работал ли с многомодульными проектами (если да, примеры)

______________________________________
SQL
1.
Есть таблица:
customers

поля:
id, name, country

Записи:
1 Ivan, Russia 
2 Sergey, Russia 
3 Kolya, UkraineRussia

Нужно написать запрос который вернёт названия стран у которых есть повторы
то есть, в выводе:
Russia

SELECT state, count(state) FROM customer
GROUP BY (state);

ОТВЕТ: GROUP BY (country) HAVING COUNT( * ) > 1; ???

2.
Как вернуть только уникальные поля?

ОТВЕТ: SELECT DISTINCT ...

3.
Ещё одна таблица
orders

поля:
id, title, customer_id

Нужно получить результирующую таблицу (написать запрос), в которой будет указаны наименования по каждому пользователю, пример:
name title
Ivan Order1 
Ivan Order2 
Ivan Order3

ОТВЕТ:
SELECT name FROM customers 
INNER JOIN orders.title
ON customers.id = orders.customer_id

4. Какие нормальные формы ты знаешь? Расскажи.
ОТВЕТ: Всего 8 нормальных форм.. используется обчно 3-я
______________________________________
JDBC
1. Виды statment'ов
ОТВЕТ: 
PreparedStatment
CollableStatment
Statment

2. Как работает PreparedStatment?
ОТВЕТ: 
Экземпляры PreparedStatement "помнят" скомпилированные SQL-выражения. Именно поэтому они называются "prepared" ("подготовленные").
SQL-выражения в PreparedStatement могут иметь один или более входной (IN) параметр. Входной параметр - это параметр, чье значение не указывается при создании SQL-выражения. Вместо него в выражении на месте каждого входного параметра ставится знак ("?"). Значение каждого вопросительного знака устанавливается методами setXXX перед выполнением запроса.

3. Что возвращает stmt.executeQuery?
ОТВЕТ: ResultSet

4. что за объекты ROLLBACK и SAVEPOINT?
ОТВЕТ: Объекты управления транзакциями.
______________________________________
Hibernate
1. Как подготовить hibernate к работе?
ОТВЕТ: файл конфигурации --> объект configuration --> фабрика сессий --> сессия --> транзакция

2. В каком виде можно написать запрос?
ОТВЕТ: SQL, HQL, Criteria API

3. Уровни кеша
ОТВЕТ - 1. объектный
	2. сессии
	3. кеш запросов

4. Состояния объекта (он описывал что мы делаем с объектом, я же должен был назвать состояние)
	transient object - Не присоединены к сессии. Это заполненные экземпляры классов-сущностей. Нет id
	persistent object - присоединён к сессии (взаимодействует с бд)
	detached object - отсоединён от сессии (может быть а может и не быть в бд) Есть id

______________________________________
Spring

Как отработает метод a()?


void a(){ 
   b(); // будет создана транзакция... создан прокси <--- ошибка
} 

@Transactional 
void b(){
}

______________________________________
Junit
Как проверить работу исключений в методе?

ОТВЕТ:
    @Test(expected = NumberFormatException.class)
    public void testToDoubleException() {
        StringUtils.toDouble(testString);
    }
Если метод кинет исключение - норм, если нет, не норм
______________________________________
Log4j
Как организовать программу, чтобы нужные нам логи записывались в файл, а некоторые другие выводились в консоль?
ОТВЕТ: 

private static final Logger log = Logger.getLogger(ТекущийКласс.class);

// в лог
log.info("Root Logger: "  + user.showMeMessage());

<Configuration>

  <!-- Секция аппендеров -->
  <Appenders>
    <!-- Файловый аппендер -->
    <File name="file" fileName="log.log">
      <PatternLayout>
        <Pattern>%d %p %c{1.} [%t] %m %ex%n</Pattern>
      </PatternLayout>
    </File>
  </Appenders>

  ...
</Configuration> 

______________________________________
GIT
Как git узнаёт о том что в рабочей директории произошли какие-то изменения? (механизм)
ОТВЕТ:
В Git’е для всего вычисляется хеш-сумма, и только потом происходит сохранение. В дальнейшем обращение к сохранённым объектам происходит по этой хеш-сумме. Это значит, что невозможно изменить содержимое файла или директории так, чтобы Git не узнал об этом. Данная функциональность встроена в Git на низком уровне и является неотъемлемой частью его философии. Вы не потеряете информацию во время её передачи и не получите повреждённый файл без ведома Git.
______________________________________
JAVA

1.
Integer i1 = 200; 
Integer i2 = 200; 

i1 == i2 (что вернёт проверка true/false?) // false

Integer i3 = 100; 
Integer i4 = 100; 

i3 == i4; (что вернёт проверка true/false?) // true

ОТВЕТ: пул Интеджеров

2.
Set<Customer> customerSet = new TreeSet();
	в этом сете я использую компоратор, которые производит сортировку по имени

Добавляю два Customer'a c одинаковыми именами
Ivan, Russia 
Ivan, Ukraine

Что окажется в set?

ОТВЕТ: Ivan, Russia 

3. Сложность работы HashMap в лучшем и худшем случае (вставка и удаление элементов)
ОТВЕТ: O(1) лучший случай, O(n) худший и там и там

4. Как устроен HashMap? В какую структуру объеденены бакеты?
ОТВЕТ: Массив

5. Есть массив в миллион элеметов. Нужно найти один, как? Сложность?
   отработает ли поиск быстрее если массив сперва отсортировать? Сложность сортировки + поиска, в таком случае?
ОТВЕТЫ:
	линейный поиск O(n)
	отсортировать и найти O n(log n)

6. Что за модификатор volatile?
ОТВЕТ: поле не кешируется (он обещал скинуть ссылку на кеширование интов)

7. Что за объект экзекутор? Потом он спрашивал про одного из наследников, но я его не знал (может про ScheduledThreadPoolExecutor?)
ОТВЕТ: Пул потоков
Нужно поюзать !!!

8. Что представляет собой классы consumers и Predicate(java 8)?
ОТВЕТ: !!!

9. расскажи про Stream API
ОТВЕТ: !!!

10 CAS vs lock ?
ОТВЕТ:
Атомарные операции (atomics), например, Compare-and-Swap (CAS)
Против
Блокировок
http://qaru.site/questions/87094/java-concurrency-cas-vs-locking

11. Какие исключение связанные с памятью ты знаешь?
ОТВЕТ:
StackOverFlow
OutOfMemory
и ещё одно?












