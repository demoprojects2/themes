Кэширование применяется ЦПУ, жёсткими дисками, браузерами, веб-серверами, службами DNS и WINS.

Алгоритмы кэширования (вытеснения):
LRU (англ. Least Recently Used) — вытесняется буфер, неиспользованный дольше всех;
MRU (англ. Most Recently Used) — вытесняется последний использованный буфер;
	в отличие от LRU, в первую очередь вытесняется последний использованный элемент. В соответствии с источником, 
	«Когда файл периодически сканируется по циклической схеме, MRU — наилучший алгоритм вытеснения». 
	В источнике авторы также подчеркивают, что для схем произвольного доступа и циклического сканирования больших наборов данных 
	(иногда называемых схемами циклического доступа) алгоритмы кэширования MRU имеют больше попаданий по сравнению с LRU за счет их стремления к сохранению старых данных. 
	Алгоритмы MRU наиболее полезны в случаях, когда чем старше элемент, тем больше обращений к нему происходит.
LFU (англ.) (англ. Least Frequently Used) — вытесняется буфер, использованный реже всех;
ARC (англ.) (англ. Adaptive Replacement Cache) — алгоритм вытеснения, комбинирующий LRU и LFU, запатентованный IBM.
Multi Queue Caching Algorithm (Алгоритм многопоточного кэширования)

Зачем нужно:
Меньше нагружать канал связи.
Меньше нагружать сервер.
Быстрее получать ответы на запросы.

Куда можно сохранять:
на HDD,
в RAM

Какие библиотеки кэширования знаешь:
1. Google's Guava library (Caches)

	Добавляет коллекции Cache и LoadingCache
	У этих коллекций есть методы которые позволяют задать размер,
	который может занимать коллекция в оперативной памяти.

	Также можно указать время существования объекта в памяти.
	Возможно есть поддержка других стратегий инвалидации.

	LoadingCache<Key, Graph> graphs = CacheBuilder.newBuilder()
    		.maximumSize(1000)
		.expireAfterWrite(10, TimeUnit.MINUTES)


	- Ссылка на библиотеку, есть примеры:
	https://github.com/google/guava/wiki/CachesExplained

	- 5-минутное видео с примером: 
	https://vimore.org/watch/ikRVbAGQBhA/guava/

	- Как автоматически обновлять кеш с помощью Google Guava? (оригинальна ссылка будет на sof):
	http://qaru.site/questions/325630/how-to-automatically-refresh-cache-using-google-guava

2. ehcache

	Есть несколько объектов
	 Configuration() 
	  Один из методов конфигурации позволяет указать место на физ носителе куда будет записываться кеш
	  Configuration().path("/path/to/store/data"));

	 CacheConfiguration()
	 .maxBytesLocalHeap(16, MemoryUnit.MEGABYTES)     //размер кэша
    	 .maxBytesLocalOffHeap(256, MemoryUnit.MEGABYTES)

	 Ehcache cache = cacheManager.getEhcache("myCache");
	  cache.put(new Element());
	  cache.put(new Element());

	- Документация
	http://www.ehcache.org/documentation/3.4/writers.html 

	- статья "Распределённая система кеша ehcache для приложений любого уровня"
	https://habrahabr.ru/post/25140/

	- Небольшой Пример
	https://ru.stackoverflow.com/questions/644690/

	- Интеграция Ehcache и Spring 3.1:
	http://www.javacore.ru/topic/86-ehcache-spring.htm 

	- Сравнение ehcache и hazelcast 
	Осторожно, плохой перевод (оригинал на sof)!
	http://qaru.site/questions/105845/hazelcast-vs-ehcache 

3. hazelcast

	Это распределённое хранилище объектов,
 	- по ссылке можно найти много хороших примеров.
	https://hazelcast.org

	- Виктор Гамов, Hazelcast — Распределяй и властвуй: введение в распределенные системы
	https://www.youtube.com/watch?v=J68pBDicGII

	- Запускаем кластер Hazelcast 3.1 на платформe Jelastic в InfoboxCloud
	https://infoboxcloud.ru/community/blog/in_memory_data_grid/14.html

	- Статья: Что, если выкинуть все лишнее из базы в распределенный кэш – наш опыт использования Hazelcast
	https://habrahabr.ru/company/yamoney/blog/332462/ https://www.youtube.com/watch?v=iMJmA31hBlE 