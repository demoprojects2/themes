================================================================================
Размер объекта в java. _________________________________________________________


--------------------------------------------------------------------------------
Введение.


Из чего состоит объект:
 1. Заголовок объекта (8 байт для 32 разрядных систем, 16 байт для 64 разрядных)
 2. Память для примитивных типов (размер примитивных типов известен из документации)
 3. Память для ссылочных типов (+ размер ссылки: в 32-х разрядных JVM обычно 4 байта, в 64-х разрядных - 8 байт)
 4. Смещение/выравнивание — по сути, это несколько неиспользуемых байт, что размещаются после данных самого объекта. Это сделано для того, чтобы адрес в памяти всегда был кратным машинному слову, для ускорения чтения из памяти + уменьшения количества бит для указателя на объект + предположительно для уменьшения фрагментации памяти. В java размер любого объекта кратен 8 байтам.

Пример: если объем потребляемой памяти на заголовок, память для примитивных типов, память для ссылочных 
типов равен 60 байт, то размер блока смещения будет - 4 байта

--------------------------------------------------------------------------------
Сериализация.

Смешение не учитывается при сериализации, то есть сериализованный объект может занимать меньше места.
Кроме того при сериализации может будыть добавлен иной header, размер которого будет отличаться в зависимости от того какую jvm мы используем, разрядности системы, и (при записи в файл) от OC.

Размер объекта в оперативной памяти != результирующующей длинне потока бит при сериализации*

*вот ещё почему это не верно:
String в памяти ~ это массив чар (каждый char не менее 2 байтов)
String при сериализации String кодируются UTF-8, поэтому любое содержимое ASCII занимает в два раза меньше места.

--------------------------------------------------------------------------------
=== Пример 1: ===

создаём - new String(«a»)

Поля в слассе String:
    private final char value[];
    private final int offset;
    private final int count;
    private int hash;


new String()
 Заголовок: 16 байт
 Поля int: 4 байта * 3 == 12 байт
 Ссылочная переменная на объект массива: 8 байт
 Выравнивание для кратности 8 : 4 байта
 Итого: 40 байта

new char[1]
 Заголовок: 16 байт + 8 байта на длину массива == 24 байт
 Примитивы char: 2 байта * 1 == 2 байта
 Выравнивание для кратности 8 : 6 байт
 Итого: 32 байта

Итого, new String("a") == 72 байта (в 64 разрядной системе)

Важно помнить что было использовано 10 байт для выравнывания кратности.
То есть теоритический объект содержащий строку и ещё одно поле типа int, также будет иметь размер 72 байта
И ещё останется 6 байт зарезервированыых для выравнивания кратности.

=== Пример 2: ===
Дано:	объект - new Man()
	объект содержит поля int и String
	int i = 1
	String s = "a"
	
	размер этого объекта = 72 байта (включая 6 байт зарезервированыых для выравнивания кратности)

	Зададим новое значение переменной типа String
	s = "mynewa"

	добавив 5 символов мы изменили размер на 2 * 5 = 10 байт

	Считаем новый размер: 72 - 6(резерв.) + 10 = 76 байт ---> Выравнивание для кратности 8 ---> + 4 байта
	итого, новый размер объекта 80 байт.

--------------------------------------------------------------------------------
Ссылки на источники:
	https://habrahabr.ru/post/134102/
	https://www.javaworld.com/article/2077408/core-java/sizeof-for-java.html



================================================================================
Как программно узнать размер объекта а java? (Решения) _________________________


Есть несколько способов:
	Решения "из коробки"
	 1. Использовать jdk.nashorn.internal.ir.debug.ObjectSizeCalculator
	 2. Использовать java.lang.instrument.Instrumentation
	"Самописные" решения
	 3. Использовать Java Reflection API - алгоритм работы аналогичен нашим вычислениям в примерах к теории.
	 4. Использовать разницу Runtime.totalMemory() - Runtime.freeMemory()

--------------------------------------------------------------------------------
1. ObjectSizeCalculator

	import jdk.nashorn.internal.ir.debug.ObjectSizeCalculator;

	Man man = new Man();
	ObjectSizeCalculator.getObjectSize(man); // вернёт long - размер в байтах

Сигнатура метода:
	public static long getObjectSize(Object obj){ ... }

--------------------------------------------------------------------------------
2. public interface Instrumentation

Для реализации этого интерфейса необходимо указать класс который его использует как premain-class (Manifest.mf)
И использовать как jar

	public class ObjectSizeFetcher {
	    private static Instrumentation instrumentation;

	    public static void premain(String args, Instrumentation inst) {
		instrumentation = inst;
	    }

	    public static long getObjectSize(Object o) {
		return instrumentation.getObjectSize(o);
	    }
	}

	public class C {
	    private int x;
	    private int y;

	    public static void main(String [] args) {
		System.out.println(ObjectSizeFetcher.getObjectSize(new C()));
	    }
	}

Докуметация:
	https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/Instrumentation.html
--------------------------------------------------------------------------------
3. Использовать Java Reflection API

Алгоритм работы аналогичен нашим вычислениям в примерах к теории.

	Размер заголовка
	Считаем замер полей
	Считаем размер ссылок
	Не забываем про выравнивания для кратности.

Пример с использованием sun.misc.Unsafe.
https://stackoverflow.com/questions/9368764/calculate-size-of-object-in-java
--------------------------------------------------------------------------------
4. Использовать разницу Runtime
Далеко не универсальный способ, но, когда он подходит, хорошо работает.

Алгоритм

	1. Создаем группу объектов
	2. Получаем разницу Runtime.totalMemory() - Runtime.freeMemory() = firstSize
	3. Удаляем объекты, вызвав gc
	4. Получаем разницу Runtime.totalMemory() - Runtime.freeMemory() = secondSize
	5. SizeOfObj = (firstSize - secondSize) / n

пример:
https://www.javaworld.com/article/2077496/testing-debugging/java-tip-130--do-you-know-your-data-size-.html
--------------------------------------------------------------------------------
Ссылки:
	Аналогичные проблемы (это переводы, оригинальные ссылки на stackoverflow)
	 http://qaru.site/questions/15149/calculate-size-of-object-in-java
	 http://qaru.site/questions/15105/in-java-what-is-the-best-way-to-determine-the-size-of-an-object
	Библиотеки
	 https://sourceforge.net/projects/sizeof/
	 http://openjdk.java.net/projects/code-tools/jol/


================================================================================
Библиотеки имеющие встроенные кеши: ____________________________________________
Приведены наиболее часто упоминаемые примеры.
Самих библиотек достаточно много, и найти их не сложно.

1. Google's Guava library (Caches)

	Добавляет коллекции Cache и LoadingCache
	У этих коллекций есть методы которые позволяют задать размер,
	который может занимать коллекция в оперативной памяти.

	Также можно указать время существования объекта в памяти.
	Возможно есть поддержка других стратегий инвалидации.

	LoadingCache<Key, Graph> graphs = CacheBuilder.newBuilder()
    		.maximumSize(1000)
		.expireAfterWrite(10, TimeUnit.MINUTES)


	- Ссылка на библиотеку, есть примеры:
	https://github.com/google/guava/wiki/CachesExplained

	- 5-минутное видео с примером: 
	https://vimore.org/watch/ikRVbAGQBhA/guava/

	- Как автоматически обновлять кеш с помощью Google Guava? (оригинальна ссылка будет на sof):
	http://qaru.site/questions/325630/how-to-automatically-refresh-cache-using-google-guava

2. ehcache

	Есть несколько объектов
	 Configuration() 
	  Один из методов конфигурации позволяет указать место на физ носителе куда будет записываться кеш
	  Configuration().path("/path/to/store/data"));

	 CacheConfiguration()
	 .maxBytesLocalHeap(16, MemoryUnit.MEGABYTES)     //размер кэша
    	 .maxBytesLocalOffHeap(256, MemoryUnit.MEGABYTES)

	 Ehcache cache = cacheManager.getEhcache("myCache");
	  cache.put(new Element());
	  cache.put(new Element());

	- Документация
	http://www.ehcache.org/documentation/3.4/writers.html 

	- статья "Распределённая система кеша ehcache для приложений любого уровня"
	https://habrahabr.ru/post/25140/

	- Небольшой Пример
	https://ru.stackoverflow.com/questions/644690/

	- Интеграция Ehcache и Spring 3.1:
	http://www.javacore.ru/topic/86-ehcache-spring.htm 

	- Сравнение ehcache и hazelcast 
	Осторожно, плохой перевод (оригинал на sof)!
	http://qaru.site/questions/105845/hazelcast-vs-ehcache 

3. hazelcast

	Это распределённое хранилище объектов,
 	- по ссылке можно найти много хороших примеров.
	https://hazelcast.org

	- Виктор Гамов, Hazelcast — Распределяй и властвуй: введение в распределенные системы
	https://www.youtube.com/watch?v=J68pBDicGII

	- Запускаем кластер Hazelcast 3.1 на платформe Jelastic в InfoboxCloud
	https://infoboxcloud.ru/community/blog/in_memory_data_grid/14.html

	- Статья: Что, если выкинуть все лишнее из базы в распределенный кэш – наш опыт использования Hazelcast
	https://habrahabr.ru/company/yamoney/blog/332462/ https://www.youtube.com/watch?v=iMJmA31hBlE 


================================================================================
Доп. информация:

	- Просто любопытная статья, тема кешей хорошо проиллюстрирована 
	https://dev.by/lenta/main/pochemu-realizatsiya-bolshogo-kesha-dannyh-na-net-i-java-ne-ochen-horoshaya-ideya

	- Тут можно найти ещё упоминаний о том, какие библиотеки для кеширования есть:
	http://qaru.site/questions/61150/lightweight-java-object-cache-api
	https://stackoverflow.com/questions/575685/looking-for-simple-java-in-memory-cache 

	- Статья: Почему реализация большого кэша данных на .net и java - не очень хорошая идея?
	https://dev.by/lenta/main/pochemu-realizatsiya-bolshogo-kesha-dannyh-na-net-i-java-ne-ochen-horoshaya-ideya

	- Часто можно встретить ссылки на JCS 
	Это спецификация описывающая способы кеширования которые в принципе есть в джава 
	Но это не совсем подходит под вопрос. Но там можно найти много любопытной информации
	https://commons.apache.org/proper/commons-jcs/
	https://commons.apache.org/proper/commons-jcs/commons-jcs-core/apidocs/org/apache/commons/jcs/JCS.html

















